library(nortest)
library(intamap)
library(ggmap)
library(maptools)
library(maps)
library(gridExtra)
###############################################################
#######LECTURA DE ARCHIVOS VECTORIALES ########################
###############################################################
MunicipiosZonaEstudio<-st_read("C:/PROYECTODEINVESTIGACION/SHAPEFILE/ZONA_DE_ESTUDIO_B/MunicipiosZonaEstudio.shp")
DatosCampo<-st_read("C:/PROYECTODEINVESTIGACION/SHAPEFILE/MuestroBalanceIonico.shp")
UsoDelSuelo<-st_read("C:/PROYECTODEINVESTIGACION/SHAPEFILE/BOYACA_CAPACIDAD_VF/UsoSueloZonaEstudio.shp")
ShapeZona<-readOGR("C:/PROYECTODEINVESTIGACION/SHAPEFILE/ZONA_DE_ESTUDIO/unidad_crono_Boyaca_zona_centro.shp")
epsg3116<-"+init=epsg:3116"
ShapeZona<-spTransform(ShapeZona,CRS(epsg3116))
PuntosInterpolar<- spsample(ShapeZona,n=70000,type="regular")
######################################################
#########CONCENTRACION MOLAR DE LOS IONES ############
######IONES A TENER EN CUENTA
Iones<-data.frame(DatosCampo$CA,DatosCampo$MG,DatosCampo$NA.,DatosCampo$K,DatosCampo$HCO3,DatosCampo$CL,DatosCampo$SO4)
PesosMolecularIones<-c(40.078 ,24.305,22.989,39.1,61.0168,35.453,96.06)
ValenciaIones<-c(2,2,1,1,1,1,2)
PesoEquivalenteIones<-PesosMolecularIones/ValenciaIones
Iones$Cameq<-((Iones$DatosCampo.CA)/PesoEquivalenteIones[1])
Iones$Mgmeq<-((Iones$DatosCampo.MG)/PesoEquivalenteIones[2])
Iones$Nameq<-((Iones$DatosCampo.NA.)/PesoEquivalenteIones[3])
Iones$Kmeq<-((Iones$DatosCampo.K)/PesoEquivalenteIones[4])
Iones$HCO3meq<-((Iones$DatosCampo.HCO3)/PesoEquivalenteIones[5])
Iones$Clmeq<-((Iones$DatosCampo.CL)/PesoEquivalenteIones[6])
Iones$SO4meq<-((Iones$DatosCampo.SO4)/PesoEquivalenteIones[7])
###################################################
#############CALCULO DEL RAS ######################
RAS<-((Iones$Nameq))/((sqrt(((Iones$Cameq)+(Iones$Mgmeq))/2)))
RAS<-data.frame(RAS,DatosCampo$CE__25C_)
summary(RAS)
C1S1<-RAS[which(RAS$RAS<10 & RAS$DatosCampo.CE__25C_<250),]  #150
C2S1<-RAS[which(RAS$RAS<10 & RAS$DatosCampo.CE__25C_>250 & RAS$DatosCampo.CE__25C_<750),] #42
C3S1<-RAS[which(RAS$RAS<10 & RAS$DatosCampo.CE__25C_>750 & RAS$DatosCampo.CE__25C_<2250),] #16
C1S2<-RAS[which(RAS$RAS>10 &RAS$DatosCampo.CE__25C_<250),]
C4S1<-RAS[which(RAS$RAS<4 & RAS$DatosCampo.CE__25C_>2250),]
DatosCampo$RAS<-RAS$RAS
###################################################################################################
###################################################################################################
###############################CORRECCION DE NORMALIDAD ###########################################
###################################################################################################
###################################################################################################
###########################################################################
########CORRECCION DE NORMALIDAD POR ANAMORFOSIS GAUSSIANA#################
###########################################################################
RASselect = DatosCampo[,c("X","Y","RAS")]
RAS.rgdb <- db.create(RASselect,ndim=2,autoname=F)
RAS.herm <- anam.fit(RAS.rgdb,name="RAS",type="gaus")
RAS.hermtrans <- anam.z2y(RAS.rgdb,names="RAS",anam=RAS.herm)
RAS.trans <- RAS.hermtrans@items$Gaussian.RAS
DatosCampo$RASTransGauss<-RAS.trans
shapiro.test(DatosCampo$RASTransGauss) #p-value 0.0247 no existe normalidad
ks.test(as.numeric(scale(sort(DatosCampo$RASTransGauss))),pnorm) #p-value 0.3081 existe normalidad
qplot(DatosCampo$RASTransGauss,geom="histogram",main = "", xlab = "Temperatura", ylab = "Frecuencia",fill=I("blue"),col=I("black"), alpha=I(.3))
############################################################################
#######CORRECCION DE NORMALIDAD POR BOX-COX ################################
############################################################################
RASBoxCox<-boxcox(DatosCampo$RAS~1)
lambdaRAS <- RASBoxCox$x[which.max(RASBoxCox$y)]
BoxRAS<- (((DatosCampo$RAS)^lambdaRAS)-1)/lambdaRAS
shapiro.test(BoxRAS) #p-value 0.9305 > 0.05 % Ya existe normalidad
ks.test(as.numeric(scale(sort(BoxRAS))),pnorm) #p-value  0.8804 ya existe normalidad
DatosCampo$RAS.TRANS<-BoxRAS
###########CORRELACIONES ALTAS ###################
#TEM, SDT, DUREZA, SO4, CL, CE
#TEM
TEMBoxCox<-boxcox(DatosCampo$T~1)
lambdaTEM <- TEMBoxCox$x[which.max(TEMBoxCox$y)]
BoxTEM<- (((DatosCampo$T)^lambdaTEM)-1)/lambdaTEM
shapiro.test(BoxTEM) #No existe normalidad
ks.test(as.numeric(scale(sort(BoxTEM))),pnorm) #p-value  0.8804 ya existe normalidad
#SDT
SDTBoxCox<-boxcox(DatosCampo$SDT~1)
lambdaSDT <- SDTBoxCox$x[which.max(SDTBoxCox$y)]
BoxSDT<- (((DatosCampo$SDT)^lambdaSDT)-1)/lambdaSDT
shapiro.test(BoxSDT) #Existe normalidad
ks.test(as.numeric(scale(sort(BoxSDT))),pnorm) # ya existe normalidad
#Dureza
DUREZABoxCox<-boxcox(DatosCampo$DUREZA~1)
lambdaDUREZA <- DUREZABoxCox$x[which.max(DUREZABoxCox$y)]
BoxDUREZA<- (((DatosCampo$DUREZA)^lambdaDUREZA)-1)/lambdaDUREZA
shapiro.test(BoxDUREZA) #Existe normalidad
ks.test(as.numeric(scale(sort(BoxDUREZA))),pnorm) # ya existe normalidad
#CL
CLBoxCox<-boxcox(DatosCampo$CL~1)
lambdaCL <- CLBoxCox$x[which.max(CLBoxCox$y)]
BoxCL<- (((DatosCampo$CL)^lambdaCL)-1)/lambdaCL
shapiro.test(BoxCL) #Existe normalidad
ks.test(as.numeric(scale(sort(BoxCL))),pnorm) # ya existe normalidad
#CE
CEBoxCox<-boxcox(DatosCampo$CE__25C_~1)
lambdaCE <- CEBoxCox$x[which.max(CEBoxCox$y)]
BoxCE<- (((DatosCampo$CE)^lambdaCE)-1)/lambdaCE
shapiro.test(BoxCE) #Existe normalidad
ks.test(as.numeric(scale(sort(BoxCE))),pnorm) # ya existe normalidad
#HC03
HCO3BoxCox<-boxcox(DatosCampo$HCO3~1)
lambdaHCO3<- HCO3BoxCox$x[which.max(HCO3BoxCox$y)]
BoxHCO3<-(((DatosCampo$HCO3)^lambdaHCO3)-1 )/lambdaHCO3
shapiro.test(BoxHCO3)# p-value = 0.2429
ks.test(as.numeric(scale(sort(BoxHCO3))),pnorm)
Estandarizacion <-function(x) {(x-mean(x))/sd(x)}
SO4Estan<-Estandarizacion(DatosCampo$SO4)
DframeSPDE<-data.frame(DatosCampo$X,DatosCampo$Y,BoxTEM,BoxSDT,BoxDUREZA,BoxCL,BoxCE,SO4Estan,BoxHCO3)
DframeSPDE$RAS<-BoxRAS
#############################################################
####CONSIDERANDO una cobertura no convexa ##################
Coordenadas<-data.frame(DatosCampo$X,DatosCampo$Y)
coordinates(Coordenadas)=~DatosCampo.X+DatosCampo.Y
proj4string(Coordenadas)<-CRS("+init=epsg:3116")
MeshNoConvex <- inla.nonconvex.hull(Coordenadas)
MeshNoConvex1<-inla.mesh.2d(
boundary = MeshNoConvex, max.edge = c(800,  3500),offset = c(500,1500), min.angle = c(26,16), cutoff = 0,plot.delay = NULL
)
RASSPDEmaterMesNohConvex1 <- inla.spde2.matern(mesh = MeshNoConvex1, alpha = 2,constr = TRUE) ##Modelo Mathern
#Luego generamos el conjunto de índices para el modelo SPDE
#Especificamos el nombre del efecto ( s), s es GAUSS y el número de vértices en el modelo SPDE
s.indexMeshNoConvex1 <- inla.spde.make.index(name="spatial.field",n.spde=RASSPDEmaterMesNohConvex1 $n.spde)
#DATOS DE PREDICCION
s.proyeccionMeshNoConvex1 <- inla.spde.make.A(mesh = MeshNoConvex1, loc = Coordenadas)
s.prediccionMeshNoConvex1<-inla.spde.make.A(mesh = MeshNoConvex1, loc = PuntosInterpolar)
formMeshNoConvex1 <- Y.RAS ~ 0+y.intercept
cv <- inlasloo(dataframe = dataframe,
long = 'long', lat = 'lat',
y = 'DframeSPDE.RAS', ss = ss,
rad = 0.3779013,alpha=0.05,
modform = formMeshNoConvex1,
mesh = MeshNoConvex1, family = 'normal',
mae = TRUE)
Covariables1<-data.frame(DatosCampo$X,DatosCampo$Y,DframeSPDE[3:8])
coords<-scale(Covariables1[, c('DatosCampo.X', 'DatosCampo.Y')])
Covariables<-data.frame(DatosCampo$X,DatosCampo$Y,BoxCE,BoxDUREZA,BoxCL,BoxTEM,SO4Estan,BoxHCO3,BoxSDT,DframeSPDE$RAS)
colnames(coords) <- c('long', 'lat')
dataf1 <- sp::SpatialPointsDataFrame(coords = coords, data = Covariables[, -c(1:2)])
dataframe <- data.frame(dataf1)
Dmax<-sqrt((max(coords[,1])-min(coords[,1]))^2+(max(coords[,2])-min(coords[,2]))^2)
Dusar<-Dmax/15 # Valor numérico que proporciona el radio de la zona de influencia espacial alrededor de la ubicación del punto excluido para la validacion cruzada
ss <- 211
formMeshNoConvex1 <- Y.RAS ~ 0+y.intercept
cv <- inlasloo(dataframe = dataframe,
long = 'long', lat = 'lat',
y = 'DframeSPDE.RAS', ss = ss,
rad = 0.3779013,alpha=0.05,
modform = formMeshNoConvex1,
mesh = MeshNoConvex1, family = 'normal',
mae = TRUE)
cv
dataa <- data.frame (matrix (unlist (cv), byrow = T), stringsAsFactors = FALSE)
v
dataa <- data.frame (matrix (unlist (cv), byrow = T), stringsAsFactors = FALSE)
Export(dataa,"ResultadosFinalesSPDERASSIN125.csv")
#########################################################################################
#######"MODELADO ESPACIAL HIDROGEOLÓGICO PARA DETERMINAR ÍNDICES DE CALIDAD##############
#######Y VULNERABILIDAD DE LAS AGUAS SUBTERRÁNEAS EN LA ZONA CENTRO DE BOYACÁ"###########
#################################################################
####CÁLCULO DEl % DE SODIO-SPDE ######## #########################
#################################################################
####LIBRERIAS A UTILIZAR
library(inlabru)
library(devtools)
library(INLAutils)
library(INLA)
library(sp)
library(spgwr)
library(raster)
library(ggplot2)
library(sf)
library(foreign)
library(spatial)
library(spData)
library(rgdal)
library(spatialreg)
library(spdep)
library(tmap)
library(RColorBrewer)
library(intervals)
library(classInt)
library(MASS)
library(gstat)
library(geoR)
library(sgeostat)
library(geospt)
library(scatterplot3d)
library(ggplot2)
library(car)
library(xtable)
library(stargazer)
library(RGeostats)
library(nortest)
library(intamap)
library(ggmap)
library(maptools)
library(maps)
library(gridExtra)
###############################################################
#######LECTURA DE ARCHIVOS VECTORIALES ########################
###############################################################
MunicipiosZonaEstudio<-st_read("C:/PROYECTODEINVESTIGACION/SHAPEFILE/ZONA_DE_ESTUDIO_B/MunicipiosZonaEstudio.shp")
DatosCampo<-st_read("C:/PROYECTODEINVESTIGACION/SHAPEFILE/MuestroBalanceIonico.shp")
UsoDelSuelo<-st_read("C:/PROYECTODEINVESTIGACION/SHAPEFILE/BOYACA_CAPACIDAD_VF/UsoSueloZonaEstudio.shp")
ShapeZona<-readOGR("C:/PROYECTODEINVESTIGACION/SHAPEFILE/ZONA_DE_ESTUDIO/unidad_crono_Boyaca_zona_centro.shp")
Coordenadas<-read.table("C:/PROYECTODEINVESTIGACION/SHAPEFILE/Depuracion.csv",header=TRUE,sep=",")
epsg3116<-"+init=epsg:3116"
ShapeZona<-spTransform(ShapeZona,CRS(epsg3116))
PuntosInterpolar<- spsample(ShapeZona,n=70000,type="regular")
##########################################################
#######CALCULO DEL %Na ###################################
##########################################################
#####################################
### CONVERSION DE MG/L A meq/L ######
#####################################
####SE TRABAJA CON LOS CATIONES CA,MG,NA,K###########
#####################################################
Iones<-data.frame(DatosCampo$CA,DatosCampo$MG,DatosCampo$NA.,DatosCampo$K)
PesosMolecularIones<-c(40.078 ,24.305,22.989,39.1)
ValenciaIones<-c(2,2,1,1)
PesoEquivalenteIones<-PesosMolecularIones/ValenciaIones
Iones$Cameq<-((Iones$DatosCampo.CA)/PesoEquivalenteIones[1])
Iones$Mgmeq<-((Iones$DatosCampo.MG)/PesoEquivalenteIones[2])
Iones$Nameq<-((Iones$DatosCampo.NA.)/PesoEquivalenteIones[3])
Iones$Kmeq<-((Iones$DatosCampo.K)/PesoEquivalenteIones[4])
########################################
## CALCULO DEL PORCENTAJE DE SODIO #####
########################################
Iones$PorcentajeSodio<-(((Iones$Nameq+Iones$Kmeq)/(Iones$Cameq+Iones$Mgmeq+Iones$Nameq)))*100
DatosCampo$PorceSodio<-Iones$PorcentajeSodio
summary(DatosCampo$PorceSodio)
###################################################################################################
###################################################################################################
###############################CORRECCION DE NORMALIDAD ###########################################
###################################################################################################
###################################################################################################
###########################################################################
########CORRECCION DE NORMALIDAD POR ANAMORFOSIS GAUSSIANA#################
###########################################################################
PorceSodioselect = DatosCampo[,c("X","Y","PorceSodio")]
Na.rgdb <- db.create(PorceSodioselect,ndim=2,autoname=F)
Na.herm <- anam.fit(Na.rgdb,name="PorceSodio",type="gaus")
Na.hermtrans <- anam.z2y(Na.rgdb,names="PorceSodio",anam=Na.herm)
Na.trans <- Na.hermtrans@items$Gaussian.PorceSodio
DatosCampo$NaTransGauss<-Na.trans
shapiro.test(DatosCampo$NaTransGauss) #p-value 0.9154 existe normalidad
ks.test(as.numeric(scale(sort(DatosCampo$NaTransGauss))),pnorm) #p-value 0.9999 existe normalidad
############################################################################
#######CORRECCION DE NORMALIDAD POR BOX-COX ################################
############################################################################
NABoxCox<-boxcox(DatosCampo$PorceSodio~1)
lambdaNa <- NABoxCox$x[which.max(NABoxCox$y)]
BoxNA<- (((DatosCampo$PorceSodio)^lambdaNa)-1)/lambdaNa
shapiro.test(BoxNA) #
ks.test(as.numeric(scale(sort(BoxNA))),pnorm) #p
DatosCampo$NaTrasBox<-BoxNA
##CON DUREZA
DUREZAselect = DatosCampo[,c("X","Y","DUREZA")]
DUREZA.rgdb <- db.create(DUREZAselect,ndim=2,autoname=F)
DUREZA.herm <- anam.fit(DUREZA.rgdb,name="DUREZA",type="gaus")
DUREZA.hermtrans <- anam.z2y(DUREZA.rgdb,names="DUREZA",anam=DUREZA.herm)
DUREZA.trans <- DUREZA.hermtrans@items$Gaussian.DUREZA
shapiro.test(DUREZA.trans) #normalizo
ks.test(as.numeric(scale(sort(DUREZA.trans))),pnorm) #
##CON PH
PHselect = DatosCampo[,c("X","Y","PH")]
PH.rgdb <- db.create(PHselect,ndim=2,autoname=F)
PH.herm <- anam.fit(PH.rgdb,name="PH",type="gaus")
PH.hermtrans <- anam.z2y(PH.rgdb,names="PH",anam=PH.herm)
PH.trans <- PH.hermtrans@items$Gaussian.PH
shapiro.test(PH.trans) #normalizo
ks.test(as.numeric(scale(sort(PH.trans))),pnorm) #p-value < 0.006684 no existe normalidad
shapiro.test(CLORO.trans) #No normalizo
ks.test(as.numeric(scale(sort(CLORO.trans))),pnorm) #p-value < 0.006684 no existe normalidad
##CON CL
CLselect = DatosCampo[,c("X","Y","CL")]
CL.rgdb <- db.create(CLselect,ndim=2,autoname=F)
CL.herm <- anam.fit(CL.rgdb,name="CL",type="gaus")
CL.hermtrans <- anam.z2y(CL.rgdb,names="CL",anam=CL.herm)
CL.trans <- CL.hermtrans@items$Gaussian.CL
shapiro.test(CL.trans) # W = 0.96701, p-value = 7.701e-05
ks.test(as.numeric(scale(sort(CL.trans))),pnorm) #D = 0.069221, p-value = 0.2642
##SDT
SDTselect = DatosCampo[,c("X","Y","SDT")]
SDT.rgdb <- db.create(SDTselect,ndim=2,autoname=F)
SDT.herm <- anam.fit(SDT.rgdb,name="SDT",type="gaus")
SDT.hermtrans <- anam.z2y(SDT.rgdb,names="SDT",anam=SDT.herm)
SDT.trans <- SDT.hermtrans@items$Gaussian.SDT
shapiro.test(SDT.trans) ####normalizo
ks.test(as.numeric(scale(sort(SDT.trans))),pnorm) #p-value < 0.006684 no existe normalidad
##TEM
TEMselect = DatosCampo[,c("X","Y","T")]
TEM.rgdb <- db.create(TEMselect,ndim=2,autoname=F)
TEM.herm <- anam.fit(TEM.rgdb,name="T",type="gaus")
TEM.hermtrans <- anam.z2y(TEM.rgdb,names="T",anam=TEM.herm)
TEM.trans <- TEM.hermtrans@items$Gaussian.T
shapiro.test(TEM.trans) ##Normalizo  #W = 0.99815, p-value = 0.9979
ks.test(as.numeric(scale(sort(TEM.trans))),pnorm) #p-value D = 0.026029, p-value = 0.9988
#hco3
HCO3select = DatosCampo[,c("X","Y","HCO3")]
HCO3.rgdb <- db.create(HCO3select,ndim=2,autoname=F)
HCO3.herm <- anam.fit(HCO3.rgdb,name="HCO3",type="gaus")
HCO3.hermtrans <- anam.z2y(HCO3.rgdb,names="HCO3",anam=HCO3.herm)
HCO3.trans <- HCO3.hermtrans@items$Gaussian.HCO3
shapiro.test(HCO3.trans) ##
ks.test(as.numeric(scale(sort(HCO3.trans))),pnorm) #
DframeSPDE<-data.frame(DatosCampo$X,DatosCampo$Y,SDT.trans,TEM.trans,CL.trans,PH.trans,DUREZA.trans,HCO3.trans,Na.trans)
Coordenadas<-data.frame(DatosCampo$X,DatosCampo$Y)
coordinates(Coordenadas)=~DatosCampo.X+DatosCampo.Y
proj4string(Coordenadas)<-CRS("+init=epsg:3116")
#############################################################
####CONSIDERANDO una cobertura no convexa ##################
MeshNoConvex <- inla.nonconvex.hull(Coordenadas)
MeshNoConvex1<-inla.mesh.2d(
boundary = MeshNoConvex, max.edge = c(800,  3500),offset = c(500,1500), min.angle = c(26,16), cutoff = 0,plot.delay = NULL
)
NaSPDEmaterMesNohConvex1 <- inla.spde2.matern(mesh = MeshNoConvex1, alpha = 2,constr = TRUE) ##Modelo Mathern
#Luego generamos el conjunto de índices para el modelo SPDE
#Especificamos el nombre del efecto ( s), s es GAUSS y el número de vértices en el modelo SPDE
s.indexMeshNoConvex1 <- inla.spde.make.index(name="spatial.field",n.spde=NaSPDEmaterMesNohConvex1 $n.spde)
#DATOS DE PREDICCION
s.proyeccionMeshNoConvex1 <- inla.spde.make.A(mesh = MeshNoConvex1, loc = Coordenadas)
s.prediccionMeshNoConvex1<-inla.spde.make.A(mesh = MeshNoConvex1, loc = PuntosInterpolar)
##sin covariables
Covariables1<-data.frame(DatosCampo$X,DatosCampo$Y,DframeSPDE$DUREZA.trans,DframeSPDE$TEM.trans,DframeSPDE$CL.trans,DframeSPDE$Na.trans)
coords<-scale(Covariables1[, c('DatosCampo.X', 'DatosCampo.Y')])
Covariables<-data.frame(DatosCampo$X,DatosCampo$Y,DUREZA.trans,SDT.trans,CL.trans,TEM.trans,HCO3.trans,DframeSPDE$Na.trans)
colnames(coords) <- c('long', 'lat')
dataf1 <- sp::SpatialPointsDataFrame(coords = coords, data = Covariables[, -c(1:2)])
dataframe <- data.frame(dataf1)
Dmax<-sqrt((max(coords[,1])-min(coords[,1]))^2+(max(coords[,2])-min(coords[,2]))^2)
Dusar<-Dmax/15 # Valor numérico que proporciona el radio de la zona de influencia espacial alrededor de la ubicación del punto excluido para la validacion cruzada
ss <- 211
formMeshNoConvex1 <- Y.NA ~ 0+y.intercept
cv <- inlasloo(dataframe = dataframe,
long = 'long', lat = 'lat',
y = 'DframeSPDE.Na.trans', ss = ss,
rad = 0.3779013,alpha=0.05,
modform = formMeshNoConvex1,
mesh = MeshNoConvex1, family = 'normal',
mae = TRUE)
cv
dataa <- data.frame (matrix (unlist (cv), byrow = T), stringsAsFactors = FALSE)
Export(dataa,"ResultadosFinalesSPDENASIN1016.csv") #
formMeshNoConvex1 <- Y.NA ~ 0  +CL.trans+SDT.trans+DUREZA.trans+TEM.trans+HCO3.trans
cv <- inlasloo(dataframe = dataframe,
long = 'long', lat = 'lat',
y = 'DframeSPDE.Na.trans', ss = ss,
rad = 0.3779013,alpha=0.05,
modform = formMeshNoConvex1,
mesh = MeshNoConvex1, family = 'normal',
mae = TRUE)
cv
dataa <- data.frame (matrix (unlist (cv), byrow = T), stringsAsFactors = FALSE)
Export(dataa,"ResultadosFinalesSPDECON058.csv") #
MediaPredicciones<-mean(ValidacionCruzadaSPDE$Predicciones)
library(sp)
library(spgwr)
library(raster)
library(ggplot2)
library(sf)
library(adespatial)
library(foreign)
library(spatial)
library(spData)
library(rgdal)
library(spatialreg)
library(spdep)
library(tmap)
library(RColorBrewer)
library(intervals)
library(classInt)
library(MASS)
library(gstat)
library(geoR)
library(sgeostat)
library(geospt)
library(scatterplot3d)
library(ggplot2)
library(car)
library(xtable)
library(stargazer)
library(RGeostats)
library(nortest)
library(intamap)
library(ggmap)
library(maptools)
library(maps)
library(ggspatial)
library(corrplot)
library(gridExtra)
MunicipiosZonaEstudio<-st_read("C:/PROYECTODEINVESTIGACION/SHAPEFILE/ZONA_DE_ESTUDIO_B/MunicipiosZonaEstudio.shp")
DatosCampo<-st_read("C:/PROYECTODEINVESTIGACION/SHAPEFILE/MuestroBalanceIonico.shp")
UsoDelSuelo<-st_read("C:/PROYECTODEINVESTIGACION/SHAPEFILE/BOYACA_CAPACIDAD_VF/UsoSueloZonaEstudio.shp")
ShapeZona<-readOGR("C:/PROYECTODEINVESTIGACION/SHAPEFILE/ZONA_DE_ESTUDIO/unidad_crono_Boyaca_zona_centro.shp")
Coordenadas<-read.table("C:/PROYECTODEINVESTIGACION/SHAPEFILE/Depuracion.csv",header=TRUE,sep=",")
epsg3116<-"+init=epsg:3116"
ShapeZona<-spTransform(ShapeZona,CRS(epsg3116))
PuntosInterpolar<- spsample(ShapeZona,n=70000,type="regular")
##############################################################################
################  CALCULO DEL % DE SODIO  #############################
##############################################################################
##############################################################################
##########################################################
#######CALCULO DEL %Na ###################################
##########################################################
#####################################
### CONVERSION DE MG/L A meq/L ######
#####################################
####SE TRABAJA CON LOS CATIONES CA,MG,NA,K###########
#####################################################
IonesNa<-data.frame(DatosCampo$CA,DatosCampo$MG,DatosCampo$NA.,DatosCampo$K)
PesosMolecularIonesNa<-c(40.078 ,24.305,22.989,39.1)
ValenciaIonesNa<-c(2,2,1,1)
PesoEquivalenteIones<-PesosMolecularIonesNa/ValenciaIonesNa
IonesNa$Cameq<-((IonesNa$DatosCampo.CA)/PesoEquivalenteIones[1])
IonesNa$Mgmeq<-((IonesNa$DatosCampo.MG)/PesoEquivalenteIones[2])
IonesNa$Nameq<-((IonesNa$DatosCampo.NA.)/PesoEquivalenteIones[3])
IonesNa$Kmeq<-((IonesNa$DatosCampo.K)/PesoEquivalenteIones[4])
########################################
## CALCULO DEL PORCENTAJE DE SODIO #####
########################################
IonesNa$PorcentajeSodio<-(((IonesNa$Nameq+IonesNa$Kmeq)/(IonesNa$Cameq+IonesNa$Mgmeq+IonesNa$Nameq)))*100
DatosCampo$PorceSodio<-IonesNa$PorcentajeSodio
summary(DatosCampo$PorceSodio)
p1<-qplot(DatosCampo$CE__25C_,geom="histogram",binwidth = 50, xlab = "Conductividad eléctrica", ylab = "Frecuecnia",fill=I("Red"),col=I("black"), alpha=I(.5))
p1<-p1+scale_x_continuous(breaks =c(0,200,400,600,800,1000,1200,1400,1600,1800,2000,2200,2400,2600,2800))
p2<-qplot(DatosCampo$PorceSodio,geom="histogram", xlab = "%Na", ylab = "Frecuecnia",fill=I("Red"),col=I("black"), alpha=I(.5))
p2<-p2+scale_x_continuous (breaks = c(10,20,30,40,50,60,70,80,90,100))
grid.arrange(p2,p1,nrow = 1, widths=c(2,2))
C1S1<-DatosCampo[which(DatosCampo$PorceSodio<20 & DatosCampo$CE__25C_<250),]
C2S1<-DatosCampo[which(DatosCampo$PorceSodio>20 & DatosCampo$PorceSodio<40),] #42
C2S2<-DatosCampo[which(DatosCampo$CE__25C_>250 & DatosCampo$CE__25C_<750),]
C3S1<-DatosCampo[which(DatosCampo$PorceSodio>40 & DatosCampo$PorceSodio<60 & DatosCampo$CE__25C_>750 & DatosCampo$CE__25C_<2000 ),] #42
C4S2<-DatosCampo[which(DatosCampo$PorceSodio>80 &  DatosCampo$CE__25C_>3000),] #42
C4S1<-RAS[which(RAS$RAS<4 & RAS$DatosCampo.CE__25C_>2250),]
###################################################################3
###CLASIFICACION DEL INDICE SEGÚN WILCOX ##########################
Excelente<-DatosCampo[which(DatosCampo$PorceSodio<20 & DatosCampo$CE__25C_<250),]  #38
Buena<-DatosCampo[which(DatosCampo$PorceSodio>=20 & DatosCampo$PorceSodio<=40 & DatosCampo$CE__25C_>=250& DatosCampo$CE__25C_<750),] #17
Permisible<-DatosCampo[which(DatosCampo$PorceSodio>40 & DatosCampo$PorceSodio<=60 & DatosCampo$CE__25C_>750& DatosCampo$CE__25C_<=2000),] #2
Deficiente<-DatosCampo[which(DatosCampo$PorceSodio>60 & DatosCampo$PorceSodio<=80 & DatosCampo$CE__25C_>2000& DatosCampo$CE__25C_<=3000),] #2
Inadecuada<-DatosCampo[which(DatosCampo$PorceSodio>80 & DatosCampo$CE__25C_>3000),] #2
#################################################
#################################################
##### ANÁLISIS DESCRIPTIVO %Na ##################
#################################################
##ANALSIS DE NORMALIDAD
##METODO GRÁFICO
X11()
qplot(DatosCampo$PorceSodio,geom = 'blank', xlab = "(%Na)") +
geom_line(aes(y = ..density.., colour = 'Empirica'), stat = 'density') +
stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..), alpha = 0.4) +
scale_colour_manual(name = 'Densidad', values = c('red', 'blue')) +
theme(legend.position = c(0.5, 0.5))
shapiro.test(DatosCampo$PorceSodio) #p-value < 8.564e-08 no existe normalidad
ks.test(as.numeric(scale(sort(DatosCampo$PorceSodio))),pnorm) #p-value < 0.006684 no existe normalidad
###################################################################################################
###################################################################################################
###############################CORRECCION DE NORMALIDAD ###########################################
###################################################################################################
###################################################################################################
###########################################################################
########CORRECCION DE NORMALIDAD POR ANAMORFOSIS GAUSSIANA#################
###########################################################################
PorceSodioselect = DatosCampo[,c("X","Y","PorceSodio")]
Na.rgdb <- db.create(PorceSodioselect,ndim=2,autoname=F)
Na.herm <- anam.fit(Na.rgdb,name="PorceSodio",type="gaus")
Na.hermtrans <- anam.z2y(Na.rgdb,names="PorceSodio",anam=Na.herm)
Na.trans <- Na.hermtrans@items$Gaussian.PorceSodio
DatosCampo$NaTransGauss<-Na.trans
shapiro.test(DatosCampo$NaTransGauss) #p-value 0.9154 existe normalidad
ks.test(as.numeric(scale(sort(DatosCampo$NaTransGauss))),pnorm) #p-value 0.9999 existe normalidad
############################################################################
#######CORRECCION DE NORMALIDAD POR BOX-COX ################################
############################################################################
NABoxCox<-boxcox(DatosCampo$PorceSodio~1)
lambdaNa <- NABoxCox$x[which.max(NABoxCox$y)]
BoxNA<- (((DatosCampo$PorceSodio)^lambdaNa)-1)/lambdaNa
shapiro.test(BoxNA) #p-value 0.09327  > 0.05 % Ya existe normalidad
ks.test(as.numeric(scale(sort(BoxNA))),pnorm) #p-value  0.8859 ya existe normalidad
DatosCampo$NaTrasBox<-BoxNA
p1<-qplot(DatosCampo$NaTrasBox,geom="histogram",main = "", xlab = "%Na Transformado Box-Cox", ylab = "Frecuencia",fill=I("blue"),col=I("black"), alpha=I(.3))
p2<-qplot(DatosCampo$NaTrasBox,geom="density",col=I("blue"),fill=I("blue"), alpha=I(0.2), main="", xlab="%Na Transformado Box-Cox",ylab="Densidad")
p3<-qplot(DatosCampo$NaTransGauss,geom="histogram",main = "", xlab = "%Na Transformado Anamorfosis Gaussiana", ylab = "Frecuencia",fill=I("blue"),col=I("black"), alpha=I(.3))
p4<-qplot(DatosCampo$NaTransGauss,geom="density",col=I("blue"),fill=I("blue"), alpha=I(0.2), main="", xlab="%Na Transformado Anamorfosis Gaussiana",ylab="Densidad")
grid.arrange(p1,p2,p3,p4,ncol = 2)
######NOTA###
#SE DECIDE TRABAJAR CON ANAMORFOSIS GAUSSIANA YA NORMALIZA LA VARIABLE %Na
p3<-ggplot(data = DatosCampo) + geom_sf(aes(size=PorceSodio), color="red", alpha=0.7) +
geom_sf(data = MunicipiosZonaEstudio, fill = "Brown", alpha=0.2,  color = "black")+xlab("Longitud")+ ylab("Latitud") +ggtitle(" ")+ annotation_north_arrow(location='tr')+annotation_scale()
p3
library(multDM)
setwd("C:/TESIS/Na/DM.TEST")
NakrigingO<-read.table("ResultadosFinaleskrigingOrdinarioPorSodio.csv",header=TRUE,sep=",")
NakrigingS<-read.table("ResultadosFinaleskrigingSimplePorSodio.csv",header=TRUE,sep=",")
NaCokrigin<-read.table("ResultadosTESISCokrigingNa.csv",header=TRUE,sep=",")
DM.test(NakrigingO$ValidacionKo.var1.pred,NakrigingS$ValidacionKs.var1.pred,NakrigingO$ValidacionKo.observed,loss.type="SE",h=1,c=FALSE,H1="more")
DM.test(NakrigingS$ValidacionKs.var1.pred,NaCokrigin$ValidacionCoKo.NAPorce.pred,NakrigingO$ValidacionKo.observed,loss.type="SE",h=1,c=FALSE,H1="more")
NaCokrigin$ValidacionCoKo.NAPorce.pred
DM.test(NakrigingS$ValidacionKs.var1.pred,NaCokrigin$ValidacionCoKoNa.NAPorce.pred,NakrigingO$ValidacionKo.observed,loss.type="SE",h=1,c=FALSE,H1="more")
setwd("C:/TESIS/Na/DM.TEST")
NaSPDESIN <-read.table("ResultadosFinalesSPDENASIN1008.csv",header=TRUE,sep=",")
NaSPDESIN <-read.table("ResultadosFinalesSPDENASIN1016.csv",header=TRUE,sep=",")
NaSPDECON<-read.table("ResultadosFinalesSPDECON0586871.csv",header=TRUE,sep=",")
NaSPDECON<-read.table("ResultadosFinalesSPDECON058.csv",header=TRUE,sep=",")
DM.test(NakrigingO$ValidacionKo.var1.pred,NaSPDESIN$Predicciones,NaSPDECON$Observaciones,loss.type="SE",h=1,c=FALSE,H1="more")
DM.test(NakrigingS$ValidacionKs.var1.pred,NaSPDESIN$Predicciones,NaSPDECON$Observaciones,loss.type="SE",h=1,c=FALSE,H1="more")
DM.test(NaCokrigin$ValidacionCoKo.NAPorce.pred,NaSPDECON$Predicciones,NakrigingO$ValidacionKo.observed,loss.type="SE",h=1,c=FALSE,H1="more")
DM.test(NaCokrigin$ValidacionCoKoNa.NAPorce.pred,NaSPDECON$Predicciones,NakrigingO$ValidacionKo.observed,loss.type="SE",h=1,c=FALSE,H1="more")
DM.test(NaSPDESIN$Predicciones,NaSPDECON$Predicciones,NaSPDECON$Observaciones,loss.type="SE",h=1,c=FALSE,H1="more")
